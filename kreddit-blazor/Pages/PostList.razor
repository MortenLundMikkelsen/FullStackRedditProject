@inherits LayoutComponentBase

@using kreddit_app.Data;
@using shared.Models;
@inject ApiService apiService

@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@if (posts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table>
        <tr>
            <th> Username</th>
            <th>Title</th>
            <th>Content</th>
            <th> Date</th>
            <th colspan="3">Votes</th>
        </tr>
        @foreach (var post in posts)
            {
            <tr>
                <!--
                    These a href links will match the route in the page 'PostItem.razor'.
                    The route is defined as "/post/{id}" and the id is the post id.
                   -->
                <td> @post.UserName</td>
                <td><a href="/post/@post.PostId">@post.Title</a></td>
                <td>@post.Body</td>
                <td>@post.PostTime</td>
                <td>@(post.UpVotes - post.DownVotes)</td>
                <td><button @onclick="() => Upvote(post.PostId)">Upvote</button></td>
                <td><button @onclick="() => Downvote(post.PostId)">Downvote</button></td>
            </tr>
            }
    </table>

    <br/>

    <CreatePost></CreatePost>



}

@code {
    private Post[]? posts;
    private Post? votePost;
    public int Totalvotes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        posts = await apiService.GetPosts();
        Array.Reverse(posts);
    }

    public void UpdateTotalVotes()
    {

    }

    private async void Upvote(long postId)
    {
        apiService.UpvotePost(postId);

    }

    private async void Downvote(long postId)
    {
        apiService.DownvotePost(postId);
    }



}
